// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/storage/interface.go

package storage

import (
	gomock "github.com/golang/mock/gomock"
	http "net/http"
)

// MockDriver is a mock of Driver interface
type MockDriver struct {
	ctrl     *gomock.Controller
	recorder *MockDriverMockRecorder
}

// MockDriverMockRecorder is the mock recorder for MockDriver
type MockDriverMockRecorder struct {
	mock *MockDriver
}

// NewMockDriver creates a new mock instance
func NewMockDriver(ctrl *gomock.Controller) *MockDriver {
	mock := &MockDriver{ctrl: ctrl}
	mock.recorder = &MockDriverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockDriver) EXPECT() *MockDriverMockRecorder {
	return _m.recorder
}

// Federate mocks base method
func (_m *MockDriver) Federate(selectors []string, acceptContentType string) (*http.Response, error) {
	ret := _m.ctrl.Call(_m, "Federate", selectors, acceptContentType)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Federate indicates an expected call of Federate
func (_mr *MockDriverMockRecorder) Federate(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Federate", arg0, arg1)
}

// Query mocks base method
func (_m *MockDriver) Query(query string, time string, timeout string, acceptContentType string) (*http.Response, error) {
	ret := _m.ctrl.Call(_m, "Query", query, time, timeout, acceptContentType)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Query indicates an expected call of Query
func (_mr *MockDriverMockRecorder) Query(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Query", arg0, arg1, arg2, arg3)
}

// QueryRange mocks base method
func (_m *MockDriver) QueryRange(query string, start string, end string, step string, timeout string, acceptContentType string) (*http.Response, error) {
	ret := _m.ctrl.Call(_m, "QueryRange", query, start, end, step, timeout, acceptContentType)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryRange indicates an expected call of QueryRange
func (_mr *MockDriverMockRecorder) QueryRange(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "QueryRange", arg0, arg1, arg2, arg3, arg4, arg5)
}

// Series mocks base method
func (_m *MockDriver) Series(match []string, start string, end string, acceptContentType string) (*http.Response, error) {
	ret := _m.ctrl.Call(_m, "Series", match, start, end, acceptContentType)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Series indicates an expected call of Series
func (_mr *MockDriverMockRecorder) Series(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Series", arg0, arg1, arg2, arg3)
}

// LabelValues mocks base method
func (_m *MockDriver) LabelValues(name string, acceptContentType string) (*http.Response, error) {
	ret := _m.ctrl.Call(_m, "LabelValues", name, acceptContentType)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LabelValues indicates an expected call of LabelValues
func (_mr *MockDriverMockRecorder) LabelValues(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "LabelValues", arg0, arg1)
}
